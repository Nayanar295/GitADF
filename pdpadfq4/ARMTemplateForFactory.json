{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pdpadfq4"
		},
		"AzureSqlDatabase_Azure_DB_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_Azure_DB_LS'"
		},
		"AzureSqlDatabase_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_LS'"
		},
		"LS_AzureSqlDatabase1_dest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase1_dest'"
		},
		"ls_sa_g2_pdp_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sa_g2_pdp'"
		},
		"AzureBlobStorage_LS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "BlobConnections"
		},
		"ls_azureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://pdpazurekeyvault.vault.azure.net/"
		},
		"ls_http_github_step2c_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://github.com"
		},
		"ls_sa_g2_pdp_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://psastep2cadfdp.dfs.core.windows.net/"
		},
		"tr_ingest_git_to_dl_properties_pl_copy_github_to_DL_parameters_pSourceRelativeURL": {
			"type": "string",
			"defaultValue": "sarafupm/step2c/raw/main/data/dataNov-19-2019_1.csv"
		},
		"tr_ingest_git_to_dl_properties_pl_copy_github_to_DL_parameters_pSinkFileName": {
			"type": "string",
			"defaultValue": "Sales_1.csv"
		},
		"tr_pl_properties_pl_copy_github_to_DL_parameters_pSourceRelativeURL": {
			"type": "string",
			"defaultValue": "sarafupm/step2c/raw/main/data/dataNov-19-2019_1.csv"
		},
		"tr_pl_properties_pl_copy_github_to_DL_parameters_pSinkFileName": {
			"type": "string",
			"defaultValue": "Sales_1.csv"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_EmployeeSalesDetails",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sourceDepartment": {},
									"sourceRegionalData": {},
									"sourceSalesSA": {},
									"sourceSalesNA": {},
									"sourcesalesEAA": {},
									"sinkTotalSalesYear": {},
									"sinkSalesSA": {},
									"sinkSalesNA": {},
									"sinkSalesEAA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "mappingDFPart2"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T16:17:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_EmployeeSalesDetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_DF_filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_copy_csv_Fiter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCSVFile": {},
									"sinkSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dataflow"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:48:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_copy_csv_Fiter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data_from_ip_to_op')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copydatafile1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sa_pdpg2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_files",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SendaEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copydatafile1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adfsendemailpdp.azurewebsites.net:443/api/SendEmail/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=AMU8pncxIQwArFKSdRXwCwpgUERYdjA4pLTQutfwKX4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"Title\":\"This is Email from ADF\",\n    \"Message\":\"Copy data from file1\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]",
				"[concat(variables('factoryId'), '/datasets/ds_dest_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_github_to_DL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales data Http to DL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_input_csvdata_http",
								"type": "DatasetReference",
								"parameters": {
									"pRelativeGitURL": {
										"value": "@pipeline().parameters.pSourceRelativeURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_output_csv_data_dl",
								"type": "DatasetReference",
								"parameters": {
									"pFileName": {
										"value": "@pipeline().parameters.pSinkFileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pSourceRelativeURL": {
						"type": "string"
					},
					"pSinkFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "copyDataFromGithubToDL"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T00:05:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_input_csvdata_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_output_csv_data_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copydata_from_SQL_to_SA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": "age",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "Address_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "Sales_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:13:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Customer')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_delete_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete CSV File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Wait 5 sec",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText_Customer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_LS",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Wait 5 sec",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:13:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_Customer')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_execute_agg_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Find Aggregate Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_copy_csv_find_Aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCSVFile": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dataflow"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:40:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_copy_csv_find_Aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_full_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Full load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_azure_sql_table_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azure_sql_table_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Proj1"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:13:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_get_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of SA",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_sa_pdpg2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata of Table",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Metadata of SA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureSqlTable_Customer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_inc_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Last Updated date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [LastLoadDate] as LastLoadDate\nfrom tblControl",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azure_sql_table_control",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Max Modified date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select max([Last_m]) as Last_m\nfrom tbluser",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azure_sql_table_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy new data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Modified date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Last Updated date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from tbluser\nWhere Last_m <= '@{activity('Get Max Modified date').output.firstRow.Last_m}' And   Last_m > '@{activity('Get Last Updated date').output.firstRow.LastLoadDate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_azure_sql_table_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azure_sql_table_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update control table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy new data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SPUpdateLoadInfo]",
							"storedProcedureParameters": {
								"ModifiedDate": {
									"value": {
										"value": "@activity('Get Max Modified date').output.firstRow.Last_m",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": "'tbluser'",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_LS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Proj1"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:15:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_control')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_destination')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_increment_proj')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy new and changed files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sa_pdpg2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_files",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Proj1"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]",
				"[concat(variables('factoryId'), '/datasets/ds_dest_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Year",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_Customer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Year').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data SQL to Datalake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@int(item().Year)",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable_Customer",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_azure_da_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:13:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Customer')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_da_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_multiple_files_from_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for Filename",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_inputFilenames_dl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach FileName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for Filename').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Sales data Http to DL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_input_csvdata_http",
											"type": "DatasetReference",
											"parameters": {
												"pRelativeGitURL": {
													"value": "@item().SourceRelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_output_csv_data_dl",
											"type": "DatasetReference",
											"parameters": {
												"pFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"relativeURL": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "copyDataFromGithubToDL"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T00:30:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputFilenames_dl')]",
				"[concat(variables('factoryId'), '/datasets/ds_input_csvdata_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_output_csv_data_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_paymentDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowCsutomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CustomerOrderPayment_transformation",
								"type": "DataFlowReference",
								"parameters": {
									"pminAge": {
										"value": "@pipeline().parameters.minAge",
										"type": "Expression"
									},
									"pmaxAge": {
										"value": "@pipeline().parameters.maxAge",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceCustomer": {},
									"sourcePayments": {},
									"sourceOrders": {},
									"sinkPaymementDetails": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"minAge": {
						"type": "string"
					},
					"maxAge": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mappingDFPart1New"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T17:23:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CustomerOrderPayment_transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceData": {},
									"destinationData": {},
									"sinkData": {},
									"sinkData2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Proj1"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:15:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until True",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool('true')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 3
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T00:13:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_until_time')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until File Exist",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FileExist')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_sa_pdpg2",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition File Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait 30 sec",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable File Exist True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileExist",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileExist": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-22T05:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Address_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Sales_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_da_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sql_table_control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "proj1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "LastLoadDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblControl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sql_table_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase1_dest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "proj1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "userData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase1_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sql_table_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "proj1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbluser"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_dest_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "mappingDFPart1-New"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "proccesed",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_src_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "mappingDFPart1-New"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers.csv",
						"folderPath": "original",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dest_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputFilenames_dl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "github_http"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ListOfFiles.csv",
						"folderPath": "ListOfFiles",
						"fileSystem": "csv-github-sec13"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "No",
						"type": "String"
					},
					{
						"name": "FullURL",
						"type": "String"
					},
					{
						"name": "BaseURL",
						"type": "String"
					},
					{
						"name": "SourceRelativeURL",
						"type": "String"
					},
					{
						"name": "FileName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_csvdata_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_github_step2c",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pRelativeGitURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "github_http"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().pRelativeGitURL",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_github_step2c')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orders_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Orders.csv",
						"folderPath": "original",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Store_id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_output_csv_data_dl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "github_http"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"fileSystem": "csv-github-sec13"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_payment_raw_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Payments.csv",
						"folderPath": "original",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sa_pdpg2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_g2_pdp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sales_File_2014_2019_USA_UK_IND.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Product_Type",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_azureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage_LS_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Azure_DB_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_Azure_DB_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase1_dest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase1_dest_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_azureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_github_step2c')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_github_step2c_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sa_g2_pdp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sa_g2_pdp_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sa_g2_pdp_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_git_to_dl')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_copy_github_to_DL",
							"type": "PipelineReference"
						},
						"parameters": {
							"pSourceRelativeURL": "[parameters('tr_ingest_git_to_dl_properties_pl_copy_github_to_DL_parameters_pSourceRelativeURL')]",
							"pSinkFileName": "[parameters('tr_ingest_git_to_dl_properties_pl_copy_github_to_DL_parameters_pSinkFileName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-01-12T00:12:11Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_github_to_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_pl')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_copy_github_to_DL",
							"type": "PipelineReference"
						},
						"parameters": {
							"pSourceRelativeURL": "[parameters('tr_pl_properties_pl_copy_github_to_DL_parameters_pSourceRelativeURL')]",
							"pSinkFileName": "[parameters('tr_pl_properties_pl_copy_github_to_DL_parameters_pSinkFileName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-01-12T00:00:14Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_github_to_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_table_source",
								"type": "DatasetReference"
							},
							"name": "sourceData"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_sql_table_destination",
								"type": "DatasetReference"
							},
							"name": "destinationData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_table_destination",
								"type": "DatasetReference"
							},
							"name": "sinkData"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_sql_table_destination",
								"type": "DatasetReference"
							},
							"name": "sinkData2"
						}
					],
					"transformations": [
						{
							"name": "existsOrNot1"
						},
						{
							"name": "existsOrNot2"
						},
						{
							"name": "alterRowData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceData",
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> destinationData",
						"sourceData, destinationData exists(sourceData@Key == destinationData@Key,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsOrNot1",
						"sourceData, destinationData exists(sourceData@Key == destinationData@Key,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsOrNot2",
						"existsOrNot2 alterRow(updateIf(true())) ~> alterRowData",
						"existsOrNot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Key,",
						"          Name,",
						"          Phone,",
						"          Last_m",
						"     )) ~> sinkData",
						"alterRowData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Key,",
						"          Name,",
						"          Phone,",
						"          Last_m",
						"     )) ~> sinkData2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_sql_table_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CustomerOrderPayment_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_customer_src_csv",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "ds_payment_raw_csv",
								"type": "DatasetReference"
							},
							"name": "sourcePayments"
						},
						{
							"dataset": {
								"referenceName": "ds_orders_csv",
								"type": "DatasetReference"
							},
							"name": "sourceOrders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_customer_dest_csv",
								"type": "DatasetReference"
							},
							"name": "sinkPaymementDetails"
						}
					],
					"transformations": [
						{
							"name": "filterOnlyNonErrorData"
						},
						{
							"name": "filterCustomerAge21To70"
						},
						{
							"name": "selectRelevantCustomerFields"
						},
						{
							"name": "selectRelevantPayementsFields"
						},
						{
							"name": "selectRelevantOrdersTable"
						},
						{
							"name": "joinCustomerOrder"
						},
						{
							"name": "joinCustomerOrderAndPayments"
						},
						{
							"name": "selectWantedColumns"
						},
						{
							"name": "PivotDueAmount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pminAge as integer,",
						"     pmaxAge as integer",
						"}",
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as short,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> sourceCustomer",
						"source(output(",
						"          order_id as string,",
						"          payment_id as string,",
						"          type as string,",
						"          descriptions as string,",
						"          pDate as date 'DD/mm/yyyy',",
						"          Status as string,",
						"          Details as string,",
						"          Total_Invoice as short,",
						"          Due_Amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePayments",
						"source(output(",
						"          order_id as string,",
						"          customer_id as string,",
						"          Store_id as string,",
						"          Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceOrders",
						"sourcePayments filter(Status != \"error\" && (not(equals(Status, \"refunded\")))) ~> filterOnlyNonErrorData",
						"sourceCustomer filter(Customersage >=$pminAge && Customersage <$pmaxAge) ~> filterCustomerAge21To70",
						"filterCustomerAge21To70 select(mapColumn(",
						"          customer_id,",
						"          Customers_First_Name = Customersfirstname,",
						"          Customers_Last_Name = Customerslastname,",
						"          Customers__Country = CustomersCountry,",
						"          Customers_Age = Customersage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantCustomerFields",
						"filterOnlyNonErrorData select(mapColumn(",
						"          payment_id,",
						"          order_id,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantPayementsFields",
						"sourceOrders select(mapColumn(",
						"          order_id,",
						"          customer_id,",
						"          Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantOrdersTable",
						"selectRelevantOrdersTable, selectRelevantCustomerFields join(selectRelevantOrdersTable@customer_id == selectRelevantCustomerFields@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomerOrder",
						"joinCustomerOrder, selectRelevantPayementsFields join(selectRelevantOrdersTable@order_id == selectRelevantPayementsFields@order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomerOrderAndPayments",
						"joinCustomerOrderAndPayments select(mapColumn(",
						"          customer_id = selectRelevantOrdersTable@customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers__Country,",
						"          Customers_Age,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWantedColumns",
						"selectWantedColumns pivot(groupBy(customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers__Country,",
						"          Customers_Age,",
						"          Total_Invoice),",
						"     pivotBy(Status, ['received', 'not received']),",
						"     Due_Amount_ = sum(Due_Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> PivotDueAmount",
						"PivotDueAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PaymentDetails.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkPaymementDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_customer_src_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_payment_raw_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_orders_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_customer_dest_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmployeeSalesDetails')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDepartment"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourceRegionalData"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesSA"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesNA"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sourcesalesEAA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTotalSalesYear"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesSA"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesNA"
						},
						{
							"linkedService": {
								"referenceName": "ls_sa_g2_pdp",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesEAA"
						}
					],
					"transformations": [
						{
							"name": "unionSANA"
						},
						{
							"name": "unionSANAEAA"
						},
						{
							"name": "unpivotSalesData"
						},
						{
							"name": "derivedColumnSalesYear"
						},
						{
							"name": "EmployeeWithAdditionalColumns"
						},
						{
							"name": "selectRelevantEmployeeColumns"
						},
						{
							"name": "selectRelevantDepartment"
						},
						{
							"name": "selectRelevantRegionFields"
						},
						{
							"name": "LookupEmployeeDepartments"
						},
						{
							"name": "LookupEmpDpeRegionsData"
						},
						{
							"name": "joinEmployeeSalesData"
						},
						{
							"name": "RelevantEmployeeSalesFields"
						},
						{
							"name": "SummaryEmployeeSalesRegion"
						},
						{
							"name": "TotalSalesPerYear"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_id as integer,",
						"          store_id as string,",
						"          department_id as integer,",
						"          firstname as string,",
						"          lastname as string,",
						"          Country as string,",
						"          age as integer,",
						"          gender as string,",
						"          email as string,",
						"          phone as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          department_id as short,",
						"          Department as string,",
						"          Phone as integer,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceDepartment",
						"source(output(",
						"          region_id as short,",
						"          region as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Region.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceRegionalData",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Sales_SA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesSA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Sales_NA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesNA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'raw',",
						"     fileName: 'Sales_EAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourcesalesEAA",
						"sourceSalesSA, sourceSalesNA union(byName: true)~> unionSANA",
						"unionSANA, sourcesalesEAA union(byName: false)~> unionSANAEAA",
						"unionSANAEAA unpivot(output(",
						"          Year as string,",
						"          Sales as integer",
						"     ),",
						"     ungroupBy(Employee_id),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotSalesData",
						"unpivotSalesData derive(Year = toInteger(right(Year, 4))) ~> derivedColumnSalesYear",
						"sourceEmployee derive(Employee_Full_Name = firstname+' '+lastname,",
						"          Employee_country = toInteger(split(Country, ',')[1]),",
						"          Employee_Region_ID = toInteger(split(Country, ',')[2])) ~> EmployeeWithAdditionalColumns",
						"EmployeeWithAdditionalColumns select(mapColumn(",
						"          Employee_id,",
						"          department_id,",
						"          Employee_Full_Name,",
						"          Employee_country,",
						"          Employee_Region_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantEmployeeColumns",
						"sourceDepartment select(mapColumn(",
						"          department_id,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantDepartment",
						"sourceRegionalData select(mapColumn(",
						"          Employee_Region_ID = region_id,",
						"          Employee_Region = region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantRegionFields",
						"selectRelevantEmployeeColumns, selectRelevantDepartment lookup(selectRelevantEmployeeColumns@department_id == selectRelevantDepartment@department_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupEmployeeDepartments",
						"LookupEmployeeDepartments, selectRelevantRegionFields lookup(toInteger(selectRelevantEmployeeColumns@Employee_Region_ID) == selectRelevantRegionFields@Employee_Region_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupEmpDpeRegionsData",
						"LookupEmpDpeRegionsData, derivedColumnSalesYear join(selectRelevantEmployeeColumns@Employee_id == unpivotSalesData@Employee_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmployeeSalesData",
						"joinEmployeeSalesData select(mapColumn(",
						"          Employee_id = selectRelevantEmployeeColumns@Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_country,",
						"          Employee_Region,",
						"          Year,",
						"          Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RelevantEmployeeSalesFields",
						"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_country,",
						"          Employee_Region,",
						"          Year),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> SummaryEmployeeSalesRegion",
						"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Year),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> TotalSalesPerYear",
						"SummaryEmployeeSalesRegion split(Employee_Region == 'South America',",
						"     Employee_Region == 'North America',",
						"     disjoint: false) ~> split1@(SummaryEmployeeSA, SummaryEmployeeNA, SummaryEmployeeEAA)",
						"TotalSalesPerYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'processed',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Total_Sales_Year.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkTotalSalesYear",
						"split1@SummaryEmployeeSA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'processed',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Sales_SA.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSalesSA",
						"split1@SummaryEmployeeNA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'processed',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Sales_NA.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSalesNA",
						"split1@SummaryEmployeeEAA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mappingdfpart2',",
						"     folderPath: 'processed',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Sales_EAA.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSalesEAA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_g2_pdp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_csv_Fiter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sa_pdpg2",
								"type": "DatasetReference"
							},
							"name": "sourceCSVFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_da_csv",
								"type": "DatasetReference"
							},
							"name": "sinkSales"
						}
					],
					"transformations": [
						{
							"name": "FilterSalesYear"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCSVFile",
						"sourceCSVFile filter(Year==2017) ~> FilterSalesYear",
						"FilterSalesYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Sales_2017.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_da_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_csv_find_Aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sa_pdpg2",
								"type": "DatasetReference"
							},
							"name": "sourceCSVFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_da_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AggregateResult"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as short,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCSVFile",
						"sourceCSVFile aggregate(groupBy(Country),",
						"     {Total Sales} = sum(Sales),",
						"          {Max Sales} = max(Sales),",
						"          {Min Sales} = min(Sales)) ~> AggregateResult",
						"AggregateResult sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sa_pdpg2')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_da_csv')]"
			]
		}
	]
}